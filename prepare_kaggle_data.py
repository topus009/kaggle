#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Kaggle
–°–æ–∑–¥–∞–µ—Ç –∞—Ä—Ö–∏–≤ —Å –º–æ–¥–µ–ª—å—é –∏ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Kaggle
"""

import os
import shutil
import zipfile
import argparse
from pathlib import Path

def create_kaggle_package(model_path="output/model.keras", 
                         test_images_path="data/images", 
                         output_dir="kaggle_package"):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Kaggle"""
    
    print("üì¶ –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Kaggle...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–∞–∫–µ—Ç–∞
    os.makedirs(output_dir, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    model_dir = os.path.join(output_dir, "model")
    test_dir = os.path.join(output_dir, "test_images")
    
    os.makedirs(model_dir, exist_ok=True)
    os.makedirs(test_dir, exist_ok=True)
    
    # –ö–æ–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    if os.path.exists(model_path):
        shutil.copy2(model_path, model_dir)
        print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: {model_path} -> {model_dir}")
    else:
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        return False
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if os.path.exists(test_images_path):
        image_files = []
        for ext in ['*.png', '*.jpg', '*.jpeg', '*.bmp', '*.tiff']:
            image_files.extend(Path(test_images_path).glob(ext))
            image_files.extend(Path(test_images_path).glob(ext.upper()))
        
        if image_files:
            for img_file in image_files:
                shutil.copy2(str(img_file), test_dir)
            print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ {test_dir}")
        else:
            print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {test_images_path}")
            return False
    else:
        print(f"‚ùå –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {test_images_path}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º README –¥–ª—è Kaggle
    readme_content = """# CAPTCHA OCR Prediction Package

## –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:
- `model/model.keras` - –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å CAPTCHA OCR
- `test_images/` - —Ç–µ—Å—Ç–æ–≤—ã–µ CAPTCHA –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

## –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —ç—Ç–æ—Ç –∞—Ä—Ö–∏–≤ –≤ Kaggle –∫–∞–∫ dataset
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ notebook `predict_kaggle.ipynb` –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
3. –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∏–∑ `input/model/model.keras`
4. –¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ `input/test_images/`

## –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- TensorFlow 2.x
- Keras
- PIL (Pillow)
- matplotlib
- pandas
- numpy

## –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
- PNG, JPEG, JPG, BMP, TIFF
"""
    
    readme_path = os.path.join(output_dir, "README.md")
    with open(readme_path, 'w', encoding='utf-8') as f:
        f.write(readme_content)
    
    print(f"‚úÖ README —Å–æ–∑–¥–∞–Ω: {readme_path}")
    
    # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
    zip_path = f"{output_dir}.zip"
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(output_dir):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, output_dir)
                zipf.write(file_path, arcname)
    
    print(f"‚úÖ ZIP –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {zip_path}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞
    zip_size = os.path.getsize(zip_path) / (1024 * 1024)
    print(f"üìä –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: {zip_size:.2f} MB")
    
    return True

def main():
    parser = argparse.ArgumentParser(description='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Kaggle')
    parser.add_argument('--model', '-m', default='output/model.keras', 
                       help='–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: output/model.keras)')
    parser.add_argument('--images', '-i', default='data/images', 
                       help='–ü–∞–ø–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: data/images)')
    parser.add_argument('--output', '-o', default='kaggle_package', 
                       help='–ü–∞–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: kaggle_package)')
    
    args = parser.parse_args()
    
    print("üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Kaggle")
    print("=" * 40)
    
    success = create_kaggle_package(args.model, args.images, args.output)
    
    if success:
        print("\n‚úÖ –ü–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤!")
        print(f"üìÅ –ü–∞–ø–∫–∞: {args.output}")
        print(f"üì¶ –ê—Ä—Ö–∏–≤: {args.output}.zip")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—Ä—Ö–∏–≤ –≤ Kaggle –∫–∞–∫ dataset")
        print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ notebook predict_kaggle.ipynb")
        print("3. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ –≤ notebook")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–∫–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()