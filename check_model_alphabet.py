#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
"""

import tensorflow as tf
from tensorflow import keras
import numpy as np

def check_model_alphabet(model_path="output/model.keras"):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–ª—Ñ–∞–≤–∏—Ç –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    try:
        print(f"üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ {model_path}...")
        model = keras.models.load_model(model_path)
        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ–π (dense —Å –≤—ã—Ö–æ–¥–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏)
        last_layer = model.layers[-1]
        print(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ–π: {last_layer.name}")
        print(f"üìä –í—ã—Ö–æ–¥–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤: {last_layer.units}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        print("\nüèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏:")
        model.summary()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–ª—Ñ–∞–≤–∏—Ç–µ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        if hasattr(model, 'config'):
            config = model.config
            print(f"\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏:")
            for key, value in config.items():
                if isinstance(value, (list, dict)) and len(str(value)) > 100:
                    print(f"   {key}: {type(value)} (–±–æ–ª—å—à–æ–π –æ–±—ä–µ–∫—Ç)")
                else:
                    print(f"   {key}: {value}")
        
        return model
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None

def analyze_training_data():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –æ–±—É—á–∞–ª–∞—Å—å –º–æ–¥–µ–ª—å"""
    print("\nüìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è...")
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    try:
        with open("data/labels.csv", 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã
        all_chars = set()
        for line in lines:
            text = line.split(';')[0].strip()
            all_chars.update(text)
        
        characters = sorted(all_chars)
        print(f"üìù –°–∏–º–≤–æ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö: {characters}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(characters)}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –∫–∞–∫ –≤ –æ–±—É—á–µ–Ω–∏–∏
        char_to_num = {v: i for i, v in enumerate(characters)}
        num_to_char = {str(i): v for i, v in enumerate(characters)}
        num_to_char['-1'] = 'UKN'
        
        print(f"üìù –°–ª–æ–≤–∞—Ä—å char_to_num: {char_to_num}")
        print(f"üìù –°–ª–æ–≤–∞—Ä—å num_to_char: {num_to_char}")
        
        return characters, char_to_num, num_to_char
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None, None

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –º–æ–¥–µ–ª–∏")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
    model = check_model_alphabet()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    characters, char_to_num, num_to_char = analyze_training_data()
    
    if model and characters:
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤
        last_layer_units = model.layers[-1].units
        expected_units = len(characters) + 1  # +1 –¥–ª—è CTC blank
        
        print(f"\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
        print(f"   –°–∏–º–≤–æ–ª–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö: {len(characters)}")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã—Ö –≤—ã—Ö–æ–¥–æ–≤: {expected_units}")
        print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ö–æ–¥–æ–≤: {last_layer_units}")
        
        if last_layer_units == expected_units:
            print("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∞–Ω–Ω—ã–º!")
        else:
            print("‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã—Ö–æ–¥–æ–≤!")
            print("   –í–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ–ª—å –æ–±—É—á–∞–ª–∞—Å—å –Ω–∞ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    print(f"\nüìù –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–ª—Ñ–∞–≤–∏—Ç –¥–ª—è predict.py:")
    if characters:
        print(f"characters = {characters}")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–ª—Ñ–∞–≤–∏—Ç")

if __name__ == "__main__":
    main()